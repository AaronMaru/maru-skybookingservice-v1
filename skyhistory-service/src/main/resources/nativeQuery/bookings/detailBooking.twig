SELECT
b.id AS bookingId,
b.booking_code AS bookingCode,
(
	SELECT bpt.transaction_id
	FROM booking_payment_transactions bpt
	WHERE bpt.booking_id = b.id
	ORDER BY bpt.id DESC
	LIMIT 1
) as transId,
(
	SELECT bpt.bank_name
	FROM booking_payment_transactions bpt
	WHERE bpt.booking_id = b.id
	ORDER BY bpt.id DESC
	LIMIT 1
) as payMethod,
b.itinerary_ref AS pnrCode,
CASE
WHEN b.trip_type = 'OneWay' THEN :ONEWAY
WHEN b.trip_type = 'Return' THEN :ROUND
WHEN b.trip_type = 'Other' THEN :MULTICITY
END AS tripType,
b.dep_date AS depDate,
b.booking_type As bookType,
b.stakeholder_user_id AS skyuserId,
(SELECT IFNULL(su.photo, 'default.png')
	FROM stakeholder_users su
	WHERE su.id = b.stakeholder_user_id
) AS skyuserPhoto,
( SELECT CONCAT(su.last_name,' ', su.first_name) AS skyuserName
	FROM stakeholder_users su
	WHERE su.id = b.stakeholder_user_id
) AS skyuserName,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
	AND bti.pass_type = "ADT"
) AS `adult`,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
	AND bti.pass_type = "CNN"
) AS `child`,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
	AND bti.pass_type = "INF"
) AS `infant`,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
) AS `totalPass`,
(SELECT (SELECT cabin_name FROM cabins WHERE cabin_code = bod.cabin_name LIMIT 1) AS cabinName
	FROM booking_origin_destinations bod
	WHERE bod.booking_id = b.id
	AND bod.parent_id IS NOT NULL
	LIMIT 1
) AS cabinName,

(SELECT bod.cabin_name
	FROM booking_origin_destinations bod
	WHERE bod.booking_id = b.id
	AND bod.parent_id IS NOT NULL
	LIMIT 1
) AS cabinCode,

( b.total_amount + b.markup_amount + b.markup_pay_amount ) AS totalAmount,
b.markup_amount AS markupAmount,
b.markup_pay_amount AS markupPayAmount,
b.dis_pay_met_amount AS disPayment,
b.currency_code AS currencyCode,
b.itinerary_file AS itineraryFile,
b.itinerary_path AS itineraryPath,
b.reciept_file AS recieptFile,
b.reciept_path AS recieptPath,
b.cont_fullname AS contName,
(
	SELECT (
			SELECT ccl.`name`
			FROM country_city_locale ccl
			WHERE ccl.country_city_id = cc.id
			AND ccl.locale_id = :locale
		) AS contLocationCode

	FROM country_city cc
	WHERE cc.iata = b.cont_location_code
) AS contLocationCode,
b.cont_phone AS contPhone,
b.cont_phonecode AS contPhoneCode,
b.cont_email AS contEmail,
b.created_at AS bookDate,
b.`status`,
CASE WHEN (b.`status` = 11 AND (

				SELECT COUNT(bod.id)
				FROM booking_origin_destinations bod
				WHERE bod.booking_id = b.id

				-- Where Date and Convert UTZ date
				AND DATE(
                        -- Flight depature datetime and convert to UTC
                        CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					) >= DATE(
                        -- User locale current time zone and convert to UTC
                        CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					)

				ORDER BY bod.id DESC
				LIMIT 1

			) > 0

		) THEN :UPCOMING

	WHEN (b.`status` = 11 AND (

				SELECT COUNT(bod.id)
				FROM booking_origin_destinations bod
				WHERE bod.booking_id = b.id

				-- Where Date and Convert TZ date
				AND DATE(
                        -- Flight depature datetime and convert to UTC
                        CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					) < DATE(
                        -- User locale current time zone and convert to UTC
                        CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					)

				ORDER BY bod.id DESC
				LIMIT 1

			) > 0

		) THEN :COMPLETED

	WHEN (b.`status` IN (3)) THEN :CANCELLED
	WHEN (b.`status` IN (1, 10, 12, 4)) THEN  :FAILED

END AS statusKey

FROM bookings b

-- Condition by Booking status
WHERE b.status IN (11, 10, 4, 12, 3, 1)
AND b.id = :bookingId

-- CHECK USERS
AND CASE WHEN :stake = "skyuser"
    THEN
        (b.stakeholder_user_id = :skyuserId AND b.stakeholder_company_id IS NULL)
    ELSE
        -- Condition for Skyowner
        b.stakeholder_company_id = :companyId
    END
