SELECT
b.id AS bookingId,
b.booking_code AS bookingCode,
b.itinerary_ref AS pnrCode,
CASE
WHEN b.trip_type = 'OneWay' THEN :ONEWAY
WHEN b.trip_type = 'Return' THEN :ROUND
WHEN b.trip_type = 'Other' THEN :MULTICITY
END AS tripType,
b.cont_email AS contEmail,
b.cont_phone AS contPhone,
b.cont_phonecode AS contPhoneCode,
b.stakeholder_user_id AS skyuserId,
(SELECT CONCAT(su.last_name,' ', su.first_name) AS skyuserName
	FROM stakeholder_users su
	WHERE su.id = b.stakeholder_user_id
) AS skyuserName,
(SELECT IFNULL(su.photo, 'default.png')
	FROM stakeholder_users su
	WHERE su.id = b.stakeholder_user_id
) AS skyuserPhoto,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
	AND bti.pass_type = "ADT"
) AS `adult`,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
	AND bti.pass_type = "CNN"
) AS `child`,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
	AND bti.pass_type = "INF"
) AS `infant`,
(SELECT IFNULL(SUM(`pass_qty`), 0)
	FROM booking_travel_itineraries bti
	WHERE bti.booking_id = b.id
) AS `totalPass`,

(SELECT (SELECT cabin_name FROM cabins WHERE cabin_code = bod.cabin_name LIMIT 1) AS cabinName
	FROM booking_origin_destinations bod
	WHERE bod.booking_id = b.id
	AND bod.parent_id IS NOT NULL
	LIMIT 1
) AS cabinName,

(SELECT bod.cabin_name
	FROM booking_origin_destinations bod
	WHERE bod.booking_id = b.id
	AND bod.parent_id IS NOT NULL
	LIMIT 1
) AS cabinCode,

( b.total_amount + b.markup_amount + b.markup_pay_amount ) AS totalAmount,
b.dis_pay_met_amount AS disPayment,
b.currency_code AS currencyCode,
b.cont_fullname AS contName,
b.created_at AS bookDate,
b.`status`,
CASE WHEN (b.`status` = 11 AND (

				SELECT COUNT(bod.id)
				FROM booking_origin_destinations bod
				WHERE bod.booking_id = b.id

				-- Where Date and Convert UTZ date
				AND DATE(
                        -- Flight depature datetime and convert to UTC
                        CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					) >= DATE(
                        -- User locale current time zone and convert to UTC
                        CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					)

				ORDER BY bod.id DESC
				LIMIT 1

			) > 0

		) THEN :UPCOMING

	WHEN (b.`status` = 11 AND (

				SELECT COUNT(bod.id)
				FROM booking_origin_destinations bod
				WHERE bod.booking_id = b.id

				-- Where Date and Convert TZ date
				AND DATE(
                        -- Flight depature datetime and convert to UTC
                        CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					) < DATE(
                        -- User locale current time zone and convert to UTC
                        CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
					)

				ORDER BY bod.id DESC
				LIMIT 1

			) > 0

		) THEN :COMPLETED

	WHEN (b.`status` IN (3)) THEN :CANCELLED
	WHEN (b.`status` IN (1, 10, 12, 4)) THEN  :FAILED

END AS statusKey

FROM bookings b


-- Condition by Booking status
WHERE b.status IN (1, 11, 10, 4, 12, 3)

-- CHECK USERS
AND CASE WHEN :stake = "skyuser"
    THEN (b.stakeholder_user_id = :skyuserId AND b.stakeholder_company_id IS NULL)
    ELSE
        -- Condition for Skyowner
        CASE WHEN
                :role = 'ADMIN'
            THEN
                b.stakeholder_company_id = :companyId
            ELSE
                b.stakeholder_user_id = :skyuserId AND b.stakeholder_company_id = :companyId
            END
    END


-- FILTER BOOKING
AND CASE WHEN
        :action = 'FILTER'
    THEN

        -- Param: startRange and endRange
        ( b.total_amount + b.markup_amount + b.markup_pay_amount ) >= :startRange AND ( b.total_amount + b.markup_amount + b.markup_pay_amount ) <= :endRange

        -- By trip type
        -- Param: tripType
        AND CASE WHEN
                :tripType != 'ALL'
            THEN
                b.trip_type = :tripType
            ELSE
                b.status IN (1, 11, 10, 4, 12, 3)
            END

        -- By stakeholder name
        -- Param: bookByName
        AND CASE WHEN
                :bookByName != 'ALL'
            THEN
                (SELECT COUNT(su.id) FROM stakeholder_users su WHERE su.id = b.stakeholder_user_id AND CONCAT(su.last_name,' ', su.first_name) LIKE '%' :bookByName '%') > 0
            ELSE
                b.status IN (1, 11, 10, 4, 12, 3)
            END


        -- By Flying From and To
        -- Param: flyingFrom, flyingTo
        AND CASE WHEN
                b.trip_type = 'RETURN'
            THEN

                -- Condition with return
                ( SELECT COUNT(fbod.id) FROM booking_origin_destinations fbod
                    WHERE fbod.booking_id = b.id
                    AND fbod.parent_id IS NOT NULL
                    AND CASE WHEN :flyingFrom != 'ALL' THEN fbod.dep_location_code = :flyingFrom ELSE b.status IN (1, 11, 10, 4, 12, 3) END
                    ORDER BY fbod.id ASC
                    LIMIT 1
                ) > 0  AND ( SELECT COUNT(fbod.id)
                    FROM booking_origin_destinations fbod
                    WHERE fbod.booking_id = b.id
                    AND fbod.parent_id IS NOT NULL
                    AND CASE WHEN :flyingTo != 'ALL' THEN fbod.dep_location_code = :flyingTo ELSE b.status IN (1, 11, 10, 4, 12, 3) END
                    ORDER BY fbod.id DESC
                    LIMIT 1
                ) > 0

            ELSE

                -- Condition with ONEWAY and Multicity
                ( SELECT COUNT(fbod.id)
                    FROM booking_origin_destinations fbod
                    WHERE fbod.booking_id = b.id
                    AND fbod.parent_id IS NOT NULL
                    AND CASE WHEN :flyingFrom != 'ALL' THEN fbod.dep_location_code = :flyingFrom ELSE b.status IN (1, 11, 10, 4, 12, 3) END
                    ORDER BY fbod.id ASC
                    LIMIT 1
                ) > 0  AND ( SELECT COUNT(fbod.id)
                    FROM booking_origin_destinations fbod
                    WHERE fbod.booking_id = b.id
                    AND fbod.parent_id IS NOT NULL
                    AND  CASE WHEN :flyingTo != 'ALL' THEN fbod.arr_location_code = :flyingTo ELSE b.status IN (1, 11, 10, 4, 12, 3) END
                    ORDER BY fbod.id DESC
                    LIMIT 1
                ) > 0

            END -- The end of Flying From and To

        -- By Class Name
        -- Param: className
        AND CASE WHEN
                :className != 'ALL'
            THEN ( SELECT COUNT(fbod.id)
                    FROM booking_origin_destinations fbod
                    WHERE fbod.booking_id = b.id
                    AND fbod.parent_id IS NOT NULL
                    AND CASE WHEN :className = 'ECONOMY' THEN fbod.cabin_code = 'Y' WHEN :className = 'FIRST' THEN fbod.cabin_code = 'F' ELSE fbod.cabin_code = 'C' END
                ) > 0
            ELSE
                 b.status IN (1, 11, 10, 4, 12, 3)
            END -- The end of Class Name

        -- By date
        -- Param: bookDate
        AND CASE WHEN
                :bookDate != 'ALL'
            THEN
                Date(b.created_at) = :bookDate
            ELSE
                b.status IN (1, 11, 10, 4, 12, 3)
            END -- The end of date

        -- By Payment Type
        -- Param: paymentType
        AND CASE WHEN
                :paymentType != 'ALL'
            THEN
                ( SELECT COUNT(bpt.id)
                FROM booking_payment_transactions bpt
                WHERE bpt.method = :paymentType
                ) > 0
            ELSE
                b.status IN (1, 11, 10, 4, 12, 3)
            END -- The end of Payment Type

        -- By booking status
        -- Param: bookStatus
        AND CASE WHEN
                :bookStatus != 'ALL'
            THEN

                -- Case of COMPLETE AND UPCOMING
                CASE WHEN ( b.status = 11 AND :bookStatus = :COMPLETED ) THEN
                        (
                            SELECT COUNT(bod.id) FROM booking_origin_destinations bod
                            WHERE bod.booking_id = b.id
                            -- Where Date and Convert TZ date
                            AND DATE(
                                    -- Flight depature datetime and convert to UTC
                                    CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
                                ) < DATE(
                                    -- User locale current time zone and convert to UTC
                                    CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT(CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ) , '+00:00')
                                )
                            ORDER BY bod.id DESC
                            LIMIT 1 ) > 0
                    WHEN ( b.status = 11 AND :bookStatus = :UPCOMING ) THEN
                            ( SELECT COUNT(bod.id)
                            FROM booking_origin_destinations bod
                            WHERE bod.booking_id = b.id

                            -- Where Date and Convert TZ date
                            AND DATE(
                                        -- Flight depature datetime and convert to UTC
                                        CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')

                                    ) >= DATE(
                                        -- User locale current time zone and convert to UTC
                                        CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END  ), '+00:00')
                                    )

                            ORDER BY bod.id DESC
                            LIMIT 1) > 0

                    WHEN :bookStatus = :CANCELLED THEN
                        b.`status` = 3

                    WHEN :bookStatus = :FAILED THEN
                        b.`status` IN (4, 10)
                    END

            ELSE
                 b.status IN (1, 11, 10, 4, 12, 3)
            END -- The end of booking status

    ELSE
        b.status IN (1, 11, 10, 4, 12, 3)
    END -- The end of filter

-- SEARCH BOOKING
AND CASE WHEN
        :action = 'SEARCH'
    THEN

        -- By trip type
        b.trip_type LIKE :keyword '%'

        -- By pnr code
        OR b.itinerary_ref LIKE :keyword '%'

        -- By booking code
        OR b.booking_code LIKE :keyword '%'

        -- By contact person
        OR b.cont_fullname LIKE :keyword '%'

        -- By date
        OR Date(b.created_at) LIKE :keyword '%'

        -- By Class Name
        OR ( SELECT COUNT(fbod.id)
            FROM booking_origin_destinations fbod
            WHERE fbod.booking_id = b.id
            AND fbod.parent_id IS NOT NULL
            AND CASE WHEN :keyword = 'ECONOMY' THEN  fbod.cabin_code = 'Y'
                     WHEN :keyword = 'FIRST' THEN  fbod.cabin_code = 'F'
                     WHEN :keyword = 'BUSINESS' THEN  fbod.cabin_code = 'C'
                     END
        ) > 0

        -- By stakeholder name
        OR (SELECT COUNT(su.id)
            FROM stakeholder_users su
            WHERE su.id = b.stakeholder_user_id
            AND CONCAT(su.last_name,' ', su.first_name) LIKE '%' :keyword '%'
        ) > 0

		-- By booking status
		OR CASE WHEN (b.status = 11 AND :keyword = :COMPLETED)  THEN
                    -- Condition for complete
                    (   SELECT COUNT(bod.id)
                        FROM booking_origin_destinations bod
                        WHERE bod.booking_id = b.id

                        -- Where Date and Convert TZ date
                        AND DATE(
                                    -- Flight depature datetime and convert to UTC
                                    CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ) , '+00:00')
                                ) < DATE(
                                    -- User locale current time zone and convert to UTC
                                    CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END) , '+00:00')
                                )

                        ORDER BY bod.id DESC
                        LIMIT 1

                    ) > 0
                WHEN (b.status = 11 AND :keyword = :UPCOMING) THEN
                    (   SELECT COUNT(bod.id)
                        FROM booking_origin_destinations bod
                        WHERE bod.booking_id = b.id

                        -- Where Date and Convert TZ date
                        AND DATE(
                                    -- Flight depature datetime and convert to UTC
                                    CONVERT_TZ(bod.dep_date, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')

                                ) >= DATE(
                                    -- User locale current time zone and convert to UTC
                                    CONVERT_TZ(CURRENT_TIMESTAMP, CONCAT( CASE WHEN bod.dep_timezone >= 0 THEN CONCAT('+', bod.dep_timezone,':00') ELSE CONCAT(bod.dep_timezone,':00') END ), '+00:00')
                                )

                        ORDER BY bod.id DESC
                        LIMIT 1

                    ) > 0

                WHEN  :keyword = :CANCELLED THEN
                    b.`status` = 3
                WHEN  :keyword = :FAILED THEN
                    b.`status` IN (4, 10)
		        END

    ELSE
        b.status IN (1, 11, 10, 4, 12, 3)
    END

GROUP BY pnrCode
ORDER BY bookDate DESC
